# SonarCloud analysis for this C repo
# -----------------------------------------------------------------------------
# What this does:
#   1) Builds the code under Sonar's Build Wrapper (produces compile_commands.json)
#   2) Runs the SonarCloud scanner
#   3) Waits for analysis to finish, pulls issues from SonarCloud's API,
#      converts to SARIF, uploads as an artifact
#   4) Publishes the SARIF to GitHub Code Scanning in a separate, least-privilege job
#
# Why it looks this way (key principles):
#   • Default-deny permissions – read-only by default; elevate only in the upload job
#   • Pinned actions – commit SHAs, not floating tags, for reproducibility and tamper-resistance
#   • Hardened egress – audit (or block) network calls to limit exfiltration risk
#   • Concurrency – cancel superseded runs to save time and money
#   • Timeouts – fail fast instead of hanging for hours
#   • Scoped checkout credentials – don't persist the GitHub token into the repo
#   • Clear triggers – run only when relevant files change
#
# Prereqs in the repo:
#   • sonar-project.properties with:
#       sonar.projectKey=<your_sonarcloud_project_key>
#       sonar.organization=<your_sonarcloud_org_key>
#       sonar.sources=.
#   • A file named main.c at repo root (adjust paths/commands if different)
#
# Secret needed:
#   • SONAR_TOKEN (Actions → Secrets) – a SonarCloud user token with access to the project
#
# CMake-only edits in the workflow. We inject enrichment flags via `-D CMAKE_*_FLAGS_<CONFIG>=...`
# at configure time, while running the actual build under the Sonar build-wrapper so it still emits
# `compile_commands.json`. We can also keep strict/experimental builds as non-gating extras.
#
# Notes:
# - Your CMake includes CodeCoverage.cmake which appends `--coverage`; that’s heavy. We keep it out
#   of the analyzer pass by running the analyzer directly via gcc for C files only.

name: SonarCloud (C - synopsis)

on:
  push:
    branches: [ "main" ]
    # Trigger only when C sources, the workflow, or Sonar properties change
    paths:
      - '**/*.c'
      - '**/*.h'
      - 'sonar-project.properties'
      - '.github/workflows/sonarcloud.yml'
  pull_request:
    branches: [ "main" ]
    types: [opened, synchronize, reopened]
    # paths:
    #  - '**/*.c'
    #  - '**/*.h'
    #  - 'sonar-project.properties'
    #  - '.github/workflows/sonarcloud.yml'
  # workflow_dispatch:

# Cancel older in-flight runs of the same ref. Avoids CI pile-ups on active PRs.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

# Default-deny: grant only read by default at the workflow level.
permissions:
  contents: read

jobs:
  # Job 1: build + scan + export SARIF (no write scopes here)
  build-and-scan:
    name: Build and analyze
    runs-on: ubuntu-24.04            # Explicit runner version for reproducibility
    timeout-minutes: 45              # A little headroom
    permissions:
      contents: read                 # Read-only; no secret write scopes here
    env:
      BW_OUT: bw-out                 # Directory where the Build Wrapper writes output

    steps:
      # Lock down outbound network. Start in audit mode; switch to block + allowlist later.
      - name: Harden runner (audit egress)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          # When the workflow is stable, prefer:
          # egress-policy: block
          # allowed-endpoints: >
          #   sonarcloud.io
          #   api.sonarcloud.io
          #   binaries.sonarsource.com
          #   github.com
          #   api.github.com
          #   uploads.github.com
          #   objects.githubusercontent.com

      # Do not persist the GITHUB_TOKEN into the repo (reduces risk in later steps)
      - name: Checkout (no persisted creds)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0              # Full history improves blame/issue precision
          persist-credentials: false  # Do not leave a token in .git/config

      # Install Sonar's Build Wrapper (wraps compiler and emits compile_commands.json)
      - name: Install Build Wrapper
        uses: SonarSource/sonarqube-scan-action/install-build-wrapper@1a6d90ebcb0e6a6b1d87e37ba693fe453195ae25 # v5.3.1
        # For SonarCloud, no SONAR_HOST_URL env is required; action defaults to sonarcloud.io

      # Build Wrapper captures the compile so the analyzer knows exactly how files were built
      # Compile under the Build Wrapper. This produces BW_OUT/compile_commands.json that the C analyzer needs.
      # NOTE: We inject extra analysis/hardening flags via CMake *build-type* variables (no repo edits).
      - name: Configure & build with CMake under Build Wrapper
        run: |
          set -euxo pipefail
          mkdir -p "${BW_OUT}"

          # Optional: Ninja makes multi-file CMake builds faster and more reproducible.
          if ! command -v ninja >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y ninja-build
          fi

          # Flags to enrich static analysis signals and harden builds (lenient in wrapped build).
          BASE_CFLAGS="-O2 -g -D_FORTIFY_SOURCE=3 -fstack-protector-strong -fPIE"
          HARDEN_WARNINGS_WRAP="-Wall -Wextra -Wformat=2 -Wformat-security -Wconversion -Wshadow -Wduplicated-cond -Wlogical-op -fno-common"
          LDFLAGS="-Wl,-z,relro,-z,now -pie"
          RELAXED_FLAGS="-Wno-error"

          build-wrapper-linux-x86-64 --out-dir "${BW_OUT}" bash -lc "
            cmake -S . -B build -G Ninja \
              -DCMAKE_BUILD_TYPE=RelWithDebInfo \
              -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
              -DCMAKE_COMPILE_WARNING_AS_ERROR=OFF \
              -DCMAKE_C_FLAGS_RELWITHDEBINFO='${BASE_CFLAGS} ${HARDEN_WARNINGS_WRAP} ${RELAXED_FLAGS}' \
              -DCMAKE_CXX_FLAGS_RELWITHDEBINFO='${BASE_CFLAGS} ${HARDEN_WARNINGS_WRAP} ${RELAXED_FLAGS}' \
              -DCMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO='${LDFLAGS}';
            cmake --build build --target synopsis synopsis_cli -j$(nproc)
          "
        timeout-minutes: 25

      # Optional secondary builds to enrich static analysis signals (do not gate CI)
      - name: Secondary analysis-only builds (per-file fanalyzer for C, plus ASan/UBSan)
        run: |
          set -euxo pipefail

          echo "::group::Per-file C fanalyzer (non-gating)"
          # Analyze ONLY C files; compile one-at-a-time to keep memory low; never fail the job.
          mapfile -t CFILES < <(git ls-files -- '*.c' ':!:**/test/**' 2>/dev/null || true)
          for f in "${CFILES[@]}"; do
            echo "analyze: $f"
            gcc -O0 -g -fanalyzer -Wnull-dereference -c "$f" -o /tmp/$(basename "$f").o || true
          done
          echo "::endgroup::"

          echo "::group::ASan/UBSan CMake build (non-gating)"
          if ! command -v ninja >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y ninja-build
          fi
          cmake -S . -B build-sanitizers -G Ninja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_C_FLAGS_RELWITHDEBINFO='-O1 -g -fno-omit-frame-pointer -fsanitize=address,undefined' \
            -DCMAKE_CXX_FLAGS_RELWITHDEBINFO='-O1 -g -fno-omit-frame-pointer -fsanitize=address,undefined' \
            -DCMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO='-fsanitize=address,undefined' || true
          cmake --build build-sanitizers --target synopsis synopsis_cli -j2 || true
          echo "::endgroup::"
        timeout-minutes: 10

      # Fail fast if the wrapper didn't produce the expected file
      - name: Verify compile_commands.json exists
        run: |
          set -eux
          ls -l "${BW_OUT}"
          test -s "${BW_OUT}/compile_commands.json"

      # Run the scanner. It reads sonar-project.properties for org/project.
      # We pass the path to compile_commands.json so the CFamily analyzer can do its job.
      - name: SonarCloud scan
        uses: SonarSource/sonarqube-scan-action@1a6d90ebcb0e6a6b1d87e37ba693fe453195ae25 # v5.3.1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # SonarCloud user token; no GitHub write scope needed
        with:
          args: >
            --define sonar.cfamily.compile-commands=${{ env.BW_OUT }}/compile_commands.json
            --define sonar.verbose=true

      # --define sonar.scm.exclusions.disabled=false
      # --define sonar.sourceEncoding=UTF-8
      # --define sonar.ws.timeout=120

      # Convert SonarCloud issues → SARIF so GitHub Code Scanning can ingest them.
      # Why a custom step? SonarCloud doesn’t publish SARIF directly, so we fetch issues via API and transcode.
      - name: Generate SARIF from SonarCloud issues
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          set -euo pipefail
          python3 - <<'PY'
          # Fetch unresolved SonarCloud issues for the most recent analysis of this project
          # and write a minimal SARIF 2.1.0 file at reports/sonarcloud.sarif
          import base64, json, os, time, urllib.parse, urllib.request, pathlib, sys

          def read_project_key():
              with open("sonar-project.properties", "r", encoding="utf-8") as f:
                  for line in f:
                      line=line.strip()
                      if line.startswith("sonar.projectKey="):
                          return line.split("=",1)[1].strip()
              raise RuntimeError("sonar.projectKey not found in sonar-project.properties")

          def get_json(url, token):
              req = urllib.request.Request(url)
              auth = base64.b64encode((token + ":").encode()).decode()
              req.add_header("Authorization", "Basic " + auth)
              with urllib.request.urlopen(req, timeout=30) as r:
                  return json.load(r)

          base = "https://sonarcloud.io"
          token = os.environ["SONAR_TOKEN"]
          project_key = read_project_key()
          print(f"Project: {project_key}")

          # Wait until the most recent Compute Engine (CE) task has finished
          for _ in range(120):  # ~6 minutes max
              act = get_json(f"{base}/api/ce/activity?component={urllib.parse.quote(project_key)}&onlyCurrents=true&ps=1", token)
              tasks = act.get("tasks", [])
              if tasks:
                  tid = tasks[0]["id"]
                  ce = get_json(f"{base}/api/ce/task?id={tid}", token)
                  status = ce["task"]["status"]
                  print(f"CE status: {status}")
                  if status in ("SUCCESS", "FAILED", "CANCELED"):
                      break
              else:
                  print("No CE tasks yet")
              time.sleep(3)

          # Pull unresolved issues for the current branch/analysis
          p=1; page_size=500; issues=[]
          while True:
              data = get_json(f"{base}/api/issues/search?componentKeys={urllib.parse.quote(project_key)}&resolved=false&ps={page_size}&p={p}", token)
              batch = data.get("issues", [])
              if not batch:
                  break
              issues.extend(batch)
              total = data.get("total", 0)
              if p*page_size >= total:
                  break
              p += 1

          def level(sev):
              return {"BLOCKER":"error","CRITICAL":"error","MAJOR":"warning","MINOR":"note","INFO":"note"}.get(sev,"warning")

          runs = [{
              "tool": {
                  "driver": {
                      "name": "SonarCloud",
                      "informationUri": "https://sonarcloud.io",
                      "rules": []
                  }
              },
              "results": []
          }]

          rule_added = set()
          for it in issues:
